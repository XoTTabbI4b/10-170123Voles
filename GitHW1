Чтобы отказаться от изменений в файлах, находящихся в рабочем каталоге, можно использовать команду git checkout -- <file> или git restore <file>. Эта команда отменит все несохраненные изменения в указанном файле и восстановит его в последнюю зафиксированную версию.

Чтобы вернуть файл из индекса в рабочий каталог, можно использовать команду git restore --staged <file>. Эта команда снимет файл с индекса, отменяя его готовность к коммиту, и восстановит его в последнюю зафиксированную версию.

Для отмены ошибочного коммита можно использовать команду git revert <commit>. Эта команда создаст новый коммит, который отменит изменения, внесенные указанным коммитом. Таким образом, история остается неизменной, но ошибочные изменения компенсируются новым коммитом.

Чтобы создать новую ветку и переключиться на нее, можно использовать команду git checkout -b <branch>. Эта команда создаст новую ветку с указанным именем и переключит текущую рабочую ветку на новую ветку.

Fast-forward merge и non fast-forward merge отличаются в способе интеграции изменений из одной ветки в другую.

Fast-forward merge происходит, когда ветка, в которую происходит слияние (называемая "вторичной веткой"), не имеет новых коммитов после точки разделения сливаемых веток. В этом случае Git просто перемещает указатель вторичной ветки на последний коммит первичной ветки, делая слияние быстрым и линейным.

Non fast-forward merge происходит, когда ветка, в которую происходит слияние, имеет новые коммиты после точки разделения. В этом случае Git создает новый коммит слияния, который объединяет изменения обеих веток. Это создает дополнительный коммит слияния в истории проекта.

Конфликт слияния веток возникает, когда Git не может автоматически объединить изменения из разных веток, так как они касаются одного и того же участка кода. Обычно это происходит, когда две ветки вносят разные изменения в одну и ту же строку кода
