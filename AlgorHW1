Алгоритм - это последовательность шагов или инструкций, которая описывает решение определенной задачи или выполнение определенной операции. 
Он представляет собой набор логических и вычислительных действий, которые приводят к достижению желаемого результата.

Основные параметры алгоритма включают:
Входные данные: информация, которую алгоритм получает при запуске.
Выходные данные: результат, который алгоритм возвращает после выполнения.
Операции: действия, которые алгоритм выполняет для преобразования входных данных в выходные.
Управляющие структуры: конструкции, которые контролируют порядок выполнения операций (например, условные операторы, циклы).

Основные способы описания алгоритма:
Естественный язык: использование обычного языка для описания последовательности шагов.
Блок-схемы: графическое представление алгоритма с использованием блоков и стрелок, показывающих порядок выполнения операций.
Псевдокод: смешанный подход, который сочетает элементы естественного языка и структурированного описания, позволяя описать алгоритм похожим на код способом, но без привязки к конкретному языку программирования.

При построении алгоритма учитываются следующие факторы:
Эффективность: алгоритм должен быть выполнимым в разумное время и использовать доступные ресурсы (например, память) эффективно.
Правильность: алгоритм должен давать правильные результаты для всех возможных входных данных.
Читаемость: алгоритм должен быть понятным и легко читаемым для разработчиков и других заинтересованных лиц.
Модульность: алгоритм может быть разбит на более маленькие части (подзадачи), что облегчает его понимание и тестирование.

Алгоритм для нахождения суммы всех положительных чисел в массиве из 10 чисел:

public class AlgHW1 {
    public static void main(String[] args) {
        int[] numbers = {-50, 10, -20, 30, -40, 50, 60, -70, 80, 90};

        int sum = 0;
        for (int number : numbers) {
            if (number > 0) {
                sum += number;
            }
        }

        System.out.println("Сумма положительных чисел: " + sum);
    }
}

Прохожу по каждому элементу в массиве numbers. Если текущий элемент больше 0, 
добавляю его к переменной sum. В конце вывожу значение переменной sum, которая будет содержать сумму всех положительных чисел в массиве.

Алгоритм для нахождения среднего арифметического всех чисел в массиве из 10 чисел:

public class AlgHW1 {
     public static void main(String[] args) {
          int[] numbers = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100};

          int sum = 0;
          for (int number : numbers) {
             sum += number;
            }

          double average = (double) sum / numbers.length;

          System.out.println("Среднее арифметическое: " + average);
        }
    }
Прохожу каждый элемент в массиве numbers и добавляю его к переменной sum. Делю значение переменной sum на количество 
элементов в массиве (numbers.length), приводя число к типу double, чтобы получить среднее арифметическое. В конце выводим значение переменной average, 
которая будет содержать среднее арифметическое всех чисел в массиве.

Оценка потребления памяти и времени в данных алгоритмах также зависит от количества элементов в массиве. В этом случае, так как массив состоит
из 10 чисел, потребление памяти будет незначительным, так как размер массива небольшой. Время выполнения алгоритма будет пропорционально 
количеству элементов в массиве, то есть время выполнения будет постоянным.



Уровень 2
-Ввести три числа, представляющие длины сторон треугольника.
-Проверить следующие условия:
-Сумма любых двух сторон треугольника должна быть больше третьей стороны.
-Каждая из трех возможных комбинаций двух сторон должна удовлетворять этому условию.
-Если все три условия выполняются, то введенные числа являются сторонами треугольника.
-В противном случае, введенные числа не образуют треугольника.

public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);

            System.out.println("Введите длины трех сторон треугольника:");

            int side1 = scanner.nextInt();
            int side2 = scanner.nextInt();
            int side3 = scanner.nextInt();

            boolean isTriangle = checkTriangle(side1, side2, side3);

            if (isTriangle) {
                System.out.println("Введенные числа являются сторонами треугольника.");
            } else {
                System.out.println("Введенные числа не образуют треугольника.");
            }
        }

        public static boolean checkTriangle(int side1, int side2, int side3) {
            boolean condition1 = (side1 + side2 > side3);
            boolean condition2 = (side2 + side3 > side1);
            boolean condition3 = (side3 + side1 > side2);

            return condition1 && condition2 && condition3;
        }
В данном коде мы сначала запрашиваем у пользователя ввод трех чисел, представляющих длины сторон треугольника. Затем вызываем функцию checkTriangle, которая проверяет выполнение условий для треугольника. Если все три условия выполняются, то возвращается значение true, и мы выводим сообщение, что введенные числа являются сторонами треугольника. В противном случае, выводится сообщение, что введенные числа не образуют треугольника.
